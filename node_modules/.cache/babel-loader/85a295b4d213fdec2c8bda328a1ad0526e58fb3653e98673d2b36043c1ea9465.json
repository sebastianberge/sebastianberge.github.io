{"ast":null,"code":"/**\n * marked v12.0.2 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = ch => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nconst noopTest = {\n  exec: () => null\n};\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape$1(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape$1(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    const [indentInNode] = matchIndentInNode;\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n  options;\n  rules; // set by the lexer\n  lexer; // set by the lexer\n  constructor(options) {\n    this.options = options || _defaults;\n  }\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text\n      };\n    }\n  }\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      // precede setext continuation with 4 spaces so it isn't a setext\n      let text = cap[0].replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1');\n      text = rtrim(text.replace(/^ *>[ \\t]?/gm, ''), '\\n');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n      let raw = '';\n      let itemContents = '';\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, t => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        let blankLine = false;\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) {\n                // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += '\\n' + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n        let istask = null;\n        let ischecked;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: []\n        });\n        list.raw += raw;\n      }\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimEnd();\n      list.items[list.items.length - 1].text = itemContents.trimEnd();\n      list.raw = list.raw.trimEnd();\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n      return list;\n    }\n  }\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0]\n      };\n      return token;\n    }\n  }\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n    if (!/[:|]/.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n    const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n    const item = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: []\n    };\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n    for (const align of aligns) {\n      if (/^ *-+: *$/.test(align)) {\n        item.align.push('right');\n      } else if (/^ *:-+: *$/.test(align)) {\n        item.align.push('center');\n      } else if (/^ *:-+ *$/.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n    for (const header of headers) {\n      item.header.push({\n        text: header,\n        tokens: this.lexer.inline(header)\n      });\n    }\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map(cell => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell)\n        };\n      }));\n    }\n    return item;\n  }\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape$1(cap[1])\n      };\n    }\n  }\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0]\n      };\n    }\n  }\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        }\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim,\n        rLength,\n        delimTotal = lLength,\n        midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n        rLength = [...rDelim].length;\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape$1(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n  autolink(src) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape$1(cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape$1(cap[1]);\n        href = text;\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  url(src) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape$1(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = escape$1(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n  inlineText(src) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = cap[0];\n      } else {\n        text = escape$1(cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/).replace(/bull/g, bullet) // lists can interrupt\n.replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n.replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n.replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n.replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n.replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n.getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/).replace('label', _blockLabel).replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title' + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n+ ')', 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nconst paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace('paragraph', paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n.replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nconst blockGfm = {\n  ...blockNormal,\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('table', gfmTable) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n  ...blockNormal,\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', _comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u').replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u').replace(/punct/g, _punctuation).getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n+ '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n.replace(/punct/g, _punctuation).getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n+ '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n.replace(/punct/g, _punctuation).getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu').replace(/punct/g, _punctuation).getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n+ '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n+ '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n+ '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n+ '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n.replace('comment', _inlineComment).replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/).replace('label', _inlineLabel).replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/).replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace('ref', _blockLabel).getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', _inlineLabel).getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n  ...inlineNormal,\n  escape: edit(escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n};\n/**\n * exports\n */\nconst block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nconst inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n  tokens;\n  options;\n  state;\n  tokenizer;\n  inlineQueue;\n  constructor(options) {\n    // TokenList cannot be created in one go\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n');\n    this.blockTokens(src, this.tokens);\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n    return this.tokens;\n  }\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n    let token;\n    let lastToken;\n    let cutSrc;\n    let lastParagraphClipped;\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  }\n  inline(src, tokens = []) {\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n      // extensions\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n  options;\n  constructor(options) {\n    this.options = options || _defaults;\n  }\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/^\\S*/)?.[0];\n    code = code.replace(/\\n$/, '') + '\\n';\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape$1(code, true)) + '</code></pre>\\n';\n    }\n    return '<pre><code class=\"language-' + escape$1(lang) + '\">' + (escaped ? code : escape$1(code, true)) + '</code></pre>\\n';\n  }\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n  html(html, block) {\n    return html;\n  }\n  heading(text, level, raw) {\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n  hr() {\n    return '<hr>\\n';\n  }\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul';\n    const startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n  listitem(text, task, checked) {\n    return `<li>${text}</li>\\n`;\n  }\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n  }\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n  /**\n   * span level renderer\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n  br() {\n    return '<br>';\n  }\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n  link(href, title, text) {\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n  image(href, title, text) {\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += '>';\n    return out;\n  }\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n  em(text) {\n    return text;\n  }\n  codespan(text) {\n    return text;\n  }\n  del(text) {\n    return text;\n  }\n  html(text) {\n    return text;\n  }\n  text(text) {\n    return text;\n  }\n  link(href, title, text) {\n    return '' + text;\n  }\n  image(href, title, text) {\n    return '' + text;\n  }\n  br() {\n    return '';\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n  options;\n  renderer;\n  textRenderer;\n  constructor(options) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '';\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        const genericToken = token;\n        const ret = this.options.extensions.renderers[genericToken.type].call({\n          parser: this\n        }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n        case 'heading':\n          {\n            const headingToken = token;\n            out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n            continue;\n          }\n        case 'code':\n          {\n            const codeToken = token;\n            out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n            continue;\n          }\n        case 'table':\n          {\n            const tableToken = token;\n            let header = '';\n            // header\n            let cell = '';\n            for (let j = 0; j < tableToken.header.length; j++) {\n              cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), {\n                header: true,\n                align: tableToken.align[j]\n              });\n            }\n            header += this.renderer.tablerow(cell);\n            let body = '';\n            for (let j = 0; j < tableToken.rows.length; j++) {\n              const row = tableToken.rows[j];\n              cell = '';\n              for (let k = 0; k < row.length; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: tableToken.align[k]\n                });\n              }\n              body += this.renderer.tablerow(cell);\n            }\n            out += this.renderer.table(header, body);\n            continue;\n          }\n        case 'blockquote':\n          {\n            const blockquoteToken = token;\n            const body = this.parse(blockquoteToken.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n        case 'list':\n          {\n            const listToken = token;\n            const ordered = listToken.ordered;\n            const start = listToken.start;\n            const loose = listToken.loose;\n            let body = '';\n            for (let j = 0; j < listToken.items.length; j++) {\n              const item = listToken.items[j];\n              const checked = item.checked;\n              const task = item.task;\n              let itemBody = '';\n              if (item.task) {\n                const checkbox = this.renderer.checkbox(!!checked);\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox + ' '\n                    });\n                  }\n                } else {\n                  itemBody += checkbox + ' ';\n                }\n              }\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, !!checked);\n            }\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n        case 'html':\n          {\n            const htmlToken = token;\n            out += this.renderer.html(htmlToken.text, htmlToken.block);\n            continue;\n          }\n        case 'paragraph':\n          {\n            const paragraphToken = token;\n            out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n            continue;\n          }\n        case 'text':\n          {\n            let textToken = token;\n            let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n            while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n              textToken = tokens[++i];\n              body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n            }\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return '';\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '';\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        const ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'escape':\n          {\n            const escapeToken = token;\n            out += renderer.text(escapeToken.text);\n            break;\n          }\n        case 'html':\n          {\n            const tagToken = token;\n            out += renderer.html(tagToken.text);\n            break;\n          }\n        case 'link':\n          {\n            const linkToken = token;\n            out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n            break;\n          }\n        case 'image':\n          {\n            const imageToken = token;\n            out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n            break;\n          }\n        case 'strong':\n          {\n            const strongToken = token;\n            out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n            break;\n          }\n        case 'em':\n          {\n            const emToken = token;\n            out += renderer.em(this.parseInline(emToken.tokens, renderer));\n            break;\n          }\n        case 'codespan':\n          {\n            const codespanToken = token;\n            out += renderer.codespan(codespanToken.text);\n            break;\n          }\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n        case 'del':\n          {\n            const delToken = token;\n            out += renderer.del(this.parseInline(delToken.tokens, renderer));\n            break;\n          }\n        case 'text':\n          {\n            const textToken = token;\n            out += renderer.text(textToken.text);\n            break;\n          }\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return '';\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n}\nclass _Hooks {\n  options;\n  constructor(options) {\n    this.options = options || _defaults;\n  }\n  static passThroughHooks = new Set(['preprocess', 'postprocess', 'processAllTokens']);\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens) {\n    return tokens;\n  }\n}\nclass Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n  parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n  parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n  constructor(...args) {\n    this.use(...args);\n  }\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table':\n          {\n            const tableToken = token;\n            for (const cell of tableToken.header) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n            for (const row of tableToken.rows) {\n              for (const cell of row) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n            }\n            break;\n          }\n        case 'list':\n          {\n            const listToken = token;\n            values = values.concat(this.walkTokens(listToken.items, callback));\n            break;\n          }\n        default:\n          {\n            const genericToken = token;\n            if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n              this.defaults.extensions.childTokens[genericToken.type].forEach(childTokens => {\n                const tokens = genericToken[childTokens].flat(Infinity);\n                values = values.concat(this.walkTokens(tokens, callback));\n              });\n            } else if (genericToken.tokens) {\n              values = values.concat(this.walkTokens(genericToken.tokens, callback));\n            }\n          }\n      }\n    }\n    return values;\n  }\n  use(...args) {\n    const extensions = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n    args.forEach(pack => {\n      // copy options to new object\n      const opts = {\n        ...pack\n      };\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach(ext => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) {\n            // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function (...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) {\n            // Tokenizer Extensions\n            if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) {\n              // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) {\n            // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (prop === 'options') {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop;\n          const rendererFunc = pack.renderer[rendererProp];\n          const prevRenderer = renderer[rendererProp];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret || '';\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp];\n          const prevTokenizer = tokenizer[tokenizerProp];\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (prop === 'options') {\n            // ignore options property\n            continue;\n          }\n          const hooksProp = prop;\n          const hooksFunc = pack.hooks[hooksProp];\n          const prevHook = hooks[hooksProp];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = arg => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function (token) {\n          let values = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n      this.defaults = {\n        ...this.defaults,\n        ...opts\n      };\n    });\n    return this;\n  }\n  setOptions(opt) {\n    this.defaults = {\n      ...this.defaults,\n      ...opt\n    };\n    return this;\n  }\n  lexer(src, options) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n  parser(tokens, options) {\n    return _Parser.parse(tokens, options ?? this.defaults);\n  }\n  #parseMarkdown(lexer, parser) {\n    return (src, options) => {\n      const origOpt = {\n        ...options\n      };\n      const opt = {\n        ...this.defaults,\n        ...origOpt\n      };\n      // Show warning if an extension set async to true but the parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        if (!opt.silent) {\n          console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n        }\n        opt.async = true;\n      }\n      const throwError = this.#onError(!!opt.silent, !!opt.async);\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n      }\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src => lexer(src, opt)).then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser(tokens, opt)).then(html => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n      }\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n  }\n  #onError(silent, async) {\n    return e => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>' + escape$1(e.message + '', true) + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options = marked.setOptions = function (options) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","_Tokenizer","options","rules","constructor","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","headers","aligns","rows","item","header","align","cell","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","emStrongLDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","Object","create","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","_Renderer","infostring","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","parser","parseInline","renderers","genericToken","ret","headingToken","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","passThroughHooks","Set","preprocess","markdown","postprocess","processAllTokens","Marked","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","args","use","callback","values","concat","childTokens","flat","pack","opts","ext","prevRenderer","apply","extLevel","prop","rendererProp","rendererFunc","tokenizerProp","tokenizerFunc","prevTokenizer","hooksProp","hooksFunc","prevHook","has","arg","Promise","resolve","then","packWalktokens","#parseMarkdown","origOpt","warn","throwError","onError","prototype","toString","all","catch","#onError","message","msg","reject","markedInstance","marked","getDefaults"],"sources":["/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/defaults.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/helpers.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/Tokenizer.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/rules.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/Lexer.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/Renderer.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/TextRenderer.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/Parser.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/Hooks.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/Instance.ts","/Users/sebastianberge/Kode/GitHub/personal/sebastianberge.github.io/node_modules/marked/src/marked.ts"],"sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nexport function edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nexport const noopTest = { exec: () => null };\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, escape, findClosingBracket } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            // precede setext continuation with 4 spaces so it isn't a setext\n            let text = cap[0].replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1');\n            text = rtrim(text.replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n","import { edit, noopTest } from './helpers.ts';\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape } from './helpers.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport { unescape } from './helpers.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nexport class _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}